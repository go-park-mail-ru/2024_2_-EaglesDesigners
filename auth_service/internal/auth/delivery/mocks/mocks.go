// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/auth/models"
	usecase "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/jwt/usecase"
	gomock "github.com/golang/mock/gomock"
)

// Mockusecase is a mock of usecase interface.
type Mockusecase struct {
	ctrl     *gomock.Controller
	recorder *MockusecaseMockRecorder
}

// MockusecaseMockRecorder is the mock recorder for Mockusecase.
type MockusecaseMockRecorder struct {
	mock *Mockusecase
}

// NewMockusecase creates a new mock instance.
func NewMockusecase(ctrl *gomock.Controller) *Mockusecase {
	mock := &Mockusecase{ctrl: ctrl}
	mock.recorder = &MockusecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockusecase) EXPECT() *MockusecaseMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *Mockusecase) Authenticate(ctx context.Context, username, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockusecaseMockRecorder) Authenticate(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*Mockusecase)(nil).Authenticate), ctx, username, password)
}

// GetUserDataByUsername mocks base method.
func (m *Mockusecase) GetUserDataByUsername(ctx context.Context, username string) (models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByUsername", ctx, username)
	ret0, _ := ret[0].(models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByUsername indicates an expected call of GetUserDataByUsername.
func (mr *MockusecaseMockRecorder) GetUserDataByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByUsername", reflect.TypeOf((*Mockusecase)(nil).GetUserDataByUsername), ctx, username)
}

// Registration mocks base method.
func (m *Mockusecase) Registration(ctx context.Context, username, name, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, username, name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registration indicates an expected call of Registration.
func (mr *MockusecaseMockRecorder) Registration(ctx, username, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*Mockusecase)(nil).Registration), ctx, username, name, password)
}

// Mocktoken is a mock of token interface.
type Mocktoken struct {
	ctrl     *gomock.Controller
	recorder *MocktokenMockRecorder
}

// MocktokenMockRecorder is the mock recorder for Mocktoken.
type MocktokenMockRecorder struct {
	mock *Mocktoken
}

// NewMocktoken creates a new mock instance.
func NewMocktoken(ctrl *gomock.Controller) *Mocktoken {
	mock := &Mocktoken{ctrl: ctrl}
	mock.recorder = &MocktokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktoken) EXPECT() *MocktokenMockRecorder {
	return m.recorder
}

// CreateJWT mocks base method.
func (m *Mocktoken) CreateJWT(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MocktokenMockRecorder) CreateJWT(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*Mocktoken)(nil).CreateJWT), ctx, username)
}

// GetUserByJWT mocks base method.
func (m *Mocktoken) GetUserByJWT(ctx context.Context, cookies []*http.Cookie) (usecase.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByJWT", ctx, cookies)
	ret0, _ := ret[0].(usecase.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByJWT indicates an expected call of GetUserByJWT.
func (mr *MocktokenMockRecorder) GetUserByJWT(ctx, cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByJWT", reflect.TypeOf((*Mocktoken)(nil).GetUserByJWT), ctx, cookies)
}

// GetUserDataByJWT mocks base method.
func (m *Mocktoken) GetUserDataByJWT(cookies []*http.Cookie) (usecase.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByJWT", cookies)
	ret0, _ := ret[0].(usecase.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByJWT indicates an expected call of GetUserDataByJWT.
func (mr *MocktokenMockRecorder) GetUserDataByJWT(cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByJWT", reflect.TypeOf((*Mocktoken)(nil).GetUserDataByJWT), cookies)
}

// IsAuthorized mocks base method.
func (m *Mocktoken) IsAuthorized(ctx context.Context, cookies []*http.Cookie) (usecase.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", ctx, cookies)
	ret0, _ := ret[0].(usecase.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MocktokenMockRecorder) IsAuthorized(ctx, cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*Mocktoken)(nil).IsAuthorized), ctx, cookies)
}
