// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/auth/models"
	usecase "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/jwt/usecase"
	gomock "github.com/golang/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *Mockrepository) CreateUser(ctx context.Context, username, name, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockrepositoryMockRecorder) CreateUser(ctx, username, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockrepository)(nil).CreateUser), ctx, username, name, password)
}

// GetUserByUsername mocks base method.
func (m *Mockrepository) GetUserByUsername(ctx context.Context, username string) (models.UserDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(models.UserDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockrepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*Mockrepository)(nil).GetUserByUsername), ctx, username)
}

// Mocktoken is a mock of token interface.
type Mocktoken struct {
	ctrl     *gomock.Controller
	recorder *MocktokenMockRecorder
}

// MocktokenMockRecorder is the mock recorder for Mocktoken.
type MocktokenMockRecorder struct {
	mock *Mocktoken
}

// NewMocktoken creates a new mock instance.
func NewMocktoken(ctrl *gomock.Controller) *Mocktoken {
	mock := &Mocktoken{ctrl: ctrl}
	mock.recorder = &MocktokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktoken) EXPECT() *MocktokenMockRecorder {
	return m.recorder
}

// CreateJWT mocks base method.
func (m *Mocktoken) CreateJWT(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MocktokenMockRecorder) CreateJWT(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*Mocktoken)(nil).CreateJWT), ctx, username)
}

// GetUserByJWT mocks base method.
func (m *Mocktoken) GetUserByJWT(ctx context.Context, cookies []*http.Cookie) (usecase.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByJWT", ctx, cookies)
	ret0, _ := ret[0].(usecase.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByJWT indicates an expected call of GetUserByJWT.
func (mr *MocktokenMockRecorder) GetUserByJWT(ctx, cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByJWT", reflect.TypeOf((*Mocktoken)(nil).GetUserByJWT), ctx, cookies)
}

// GetUserDataByJWT mocks base method.
func (m *Mocktoken) GetUserDataByJWT(cookies []*http.Cookie) (usecase.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByJWT", cookies)
	ret0, _ := ret[0].(usecase.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByJWT indicates an expected call of GetUserDataByJWT.
func (mr *MocktokenMockRecorder) GetUserDataByJWT(cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByJWT", reflect.TypeOf((*Mocktoken)(nil).GetUserDataByJWT), cookies)
}
