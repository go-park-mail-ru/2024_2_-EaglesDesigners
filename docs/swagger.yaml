basePath: /
definitions:
  customerror.NoPermissionError:
    properties:
      area:
        type: string
      user:
        type: string
    type: object
  delivery.SuccessfullSuccess:
    properties:
      success:
        type: string
    type: object
  model.AddBranch:
    properties:
      id:
        example: f0364477-bfd4-496d-b639-d825b009d509
        type: string
    type: object
  model.AddUsersIntoChatDTO:
    properties:
      usersId:
        example:
        - uuid1
        - uuid2
        items:
          type: string
        type: array
    type: object
  model.ChatDTOInput:
    properties:
      chatName:
        example: Чат с пользователем 2
        type: string
      chatType:
        example: personalMessages
        type: string
      usersToAdd:
        example:
        - uuid1
        - uuid2
        items:
          type: string
        type: array
    type: object
  model.ChatDTOOutput:
    properties:
      avatarPath:
        example: /uploads/chat/f0364477-bfd4-496d-b639-d825b009d509.png
        type: string
      chatId:
        example: 08a0f350-e122-467b-8ba8-524d2478b56e
        type: string
      chatName:
        example: Чат с пользователем 2
        type: string
      chatType:
        example: personal
        type: string
      countOfUsers:
        example: 52
        type: integer
      lastMessage:
        $ref: '#/definitions/models.Message'
    type: object
  model.ChatInfoDTO:
    properties:
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      role:
        example: owner
        type: string
      users:
        items:
          $ref: '#/definitions/model.UserInChatDTO'
        type: array
    type: object
  model.ChatUpdate:
    properties:
      chatName:
        example: Чат с пользователем 2
        type: string
    type: object
  model.ChatUpdateOutput:
    properties:
      chatName:
        example: Чат с пользователем 2
        type: string
      updatedAvatarPath:
        example: /uploads/chat/f0364477-bfd4-496d-b639-d825b009d509.png
        type: string
    type: object
  model.ChatsDTO:
    properties:
      chats:
        items:
          $ref: '#/definitions/model.ChatDTOOutput'
        type: array
    type: object
  model.DeletdeUsersFromChatDTO:
    properties:
      deletedUsers:
        example:
        - uuid1
        - uuid2
        items:
          type: string
        type: array
    type: object
  model.DeleteUsersFromChatDTO:
    properties:
      usersId:
        example:
        - uuid1
        - uuid2
        items:
          type: string
        type: array
    type: object
  model.SearchChatsDTO:
    properties:
      global_channels:
        items:
          $ref: '#/definitions/model.ChatDTOOutput'
        type: array
      user_chats:
        items:
          $ref: '#/definitions/model.ChatDTOOutput'
        type: array
    type: object
  model.UserInChatDTO:
    properties:
      avatarURL:
        example: /uploads/avatar/f0364477-bfd4-496d-b639-d825b009d509.png
        type: string
      id:
        example: f0364477-bfd4-496d-b639-d825b009d509
        type: string
      name:
        example: Vincent Vega
        type: string
      role:
        example: owner
        type: string
      username:
        example: mavrodi777
        type: string
    type: object
  models.AuthReqDTO:
    properties:
      password:
        example: "12345678"
        type: string
      username:
        example: user11
        type: string
    type: object
  models.ContactReqDTO:
    properties:
      contactUsername:
        example: user11
        type: string
    type: object
  models.ContactRespDTO:
    properties:
      avatarURL:
        example: /uploads/avatar/642c5a57-ebc7-49d0-ac2d-f2f1f474bee7.png
        type: string
      id:
        example: 08a0f350-e122-467b-8ba8-524d2478b56e
        type: string
      name:
        example: Витек
        type: string
      username:
        example: user11
        type: string
    type: object
  models.GetContactsRespDTO:
    properties:
      contacts:
        items:
          $ref: '#/definitions/models.ContactRespDTO'
        type: array
    type: object
  models.GetProfileResponseDTO:
    properties:
      avatarURL:
        example: /uploads/avatar/f0364477-bfd4-496d-b639-d825b009d509.png
        type: string
      bio:
        example: Не люблю сети
        type: string
      birthdate:
        example: "2024-04-13T08:30:00Z"
        type: string
      name:
        example: Vincent Vega
        type: string
    type: object
  models.Message:
    properties:
      authorID:
        type: string
      branchId:
        type: string
      chatId:
        type: string
      datetime:
        example: "2024-04-13T08:30:00Z"
        type: string
      isRedacted:
        type: boolean
      messageId:
        example: "1"
        type: string
      text:
        example: тут много текста
        type: string
    type: object
  models.MessageInput:
    properties:
      text:
        example: тут много текста
        type: string
    type: object
  models.MessagesArrayDTO:
    properties:
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
    type: object
  models.RegisterReqDTO:
    properties:
      name:
        example: Vincent Vega
        type: string
      password:
        example: go_do_a_crime
        type: string
      username:
        example: killer1994
        type: string
    type: object
  models.RegisterRespDTO:
    properties:
      message:
        example: Registration successful
        type: string
      user:
        $ref: '#/definitions/models.UserDataRespDTO'
    type: object
  models.UpdateProfileRequestDTO:
    properties:
      bio:
        example: Не люблю сети
        type: string
      birthdate:
        example: "2024-04-13T08:30:00Z"
        type: string
      deleteAvatar:
        type: boolean
      name:
        example: Vincent Vega
        type: string
    type: object
  models.UserDataRespDTO:
    properties:
      avatarURL:
        example: /uploads/avatar/f0364477-bfd4-496d-b639-d825b009d509.png
        type: string
      id:
        example: f0364477-bfd4-496d-b639-d825b009d509
        type: string
      name:
        example: Dr Peper
        type: string
      username:
        example: user12
        type: string
    type: object
  responser.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
      status:
        example: error
        type: string
    type: object
  responser.SuccessResponse:
    properties:
      message:
        example: success message
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: 212.233.98.59:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a description of the Patefon server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Patefon API
  version: "1.0"
paths:
  /addchat:
    post:
      consumes:
      - application/json
      parameters:
      - description: Chat info
        in: body
        name: chat
        required: true
        schema:
          $ref: '#/definitions/model.ChatDTOInput'
      responses:
        "201":
          description: Чат создан
          schema:
            $ref: '#/definitions/model.ChatDTOOutput'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось добавить чат / группу
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Add new chat
      tags:
      - chat
  /auth:
    get:
      consumes:
      - application/json
      description: Retrieve user data based on the JWT token present in the cookies.
      produces:
      - application/json
      responses:
        "200":
          description: User data retrieved successfully
          schema:
            $ref: '#/definitions/models.UserDataRespDTO'
        "401":
          description: 'Unauthorized: token is invalid'
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Authenticate a user
      tags:
      - auth
  /chat/{chatId}:
    get:
      parameters:
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      responses:
        "200":
          description: Пользователи чата
          schema:
            $ref: '#/definitions/model.ChatInfoDTO'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет полномочий
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось получить учатсников
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получаем пользователей и последние сообщении чата
      tags:
      - chat
    put:
      consumes:
      - multipart/form-data
      description: Update bio, avatar, name or birthdate of user.
      parameters:
      - description: JSON representation of chat data
        in: body
        name: chat_data
        required: true
        schema:
          $ref: '#/definitions/model.ChatUpdate'
      - description: group avatar
        in: formData
        name: avatar
        type: file
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      responses:
        "200":
          description: Чат обновлен
          schema:
            $ref: '#/definitions/model.ChatUpdateOutput'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет полномочий
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось обновчить чат
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновляем фото и имя
      tags:
      - chat
  /chat/{chatId}/{messageId}/branch:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Ветка добавлена
          schema:
            $ref: '#/definitions/model.AddBranch'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет полномочий
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавить ветку к сообщению в чате
      tags:
      - chat
  /chat/{chatId}/addusers:
    post:
      consumes:
      - application/json
      parameters:
      - description: Пользователи на добавление
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/model.AddUsersIntoChatDTO'
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      responses:
        "200":
          description: Пользователи добавлены
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось добавить пользователей
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Добавить пользователей в чат
      tags:
      - chat
  /chat/{chatId}/delete:
    delete:
      parameters:
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      responses:
        "200":
          description: Чат удалён
          schema:
            $ref: '#/definitions/delivery.SuccessfullSuccess'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет полномочий
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось удалить чат
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Удаличть чат или группу
      tags:
      - chat
  /chat/{chatId}/delusers:
    post:
      consumes:
      - application/json
      parameters:
      - description: Пользователи на добавление
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/model.DeleteUsersFromChatDTO'
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      responses:
        "200":
          description: Пользователи удалены
          schema:
            $ref: '#/definitions/model.DeletdeUsersFromChatDTO'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось добавить пользователей
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Удалить пользователей из чата
      tags:
      - chat
  /chat/{chatId}/messages:
    get:
      parameters:
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      - description: Messages
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.MessagesArrayDTO'
      responses:
        "200":
          description: Сообщение успешно отаправлены
          schema:
            $ref: '#/definitions/models.MessagesArrayDTO'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось получить сообщениея
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Get All messages
      tags:
      - message
    post:
      consumes:
      - application/json
      parameters:
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      - description: Message info
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.MessageInput'
      responses:
        "201":
          description: Сообщение успешно добавлено
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось добавить сообщение
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Add new message
      tags:
      - message
  /chat/{chatId}/messages/{lastMessageId}:
    get:
      parameters:
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: chatId
        required: true
        type: string
      - description: Chat ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: lastMessageId
        required: true
        type: string
      responses:
        "200":
          description: Сообщение успешно отаправлены
          schema:
            $ref: '#/definitions/models.MessagesArrayDTO'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/customerror.NoPermissionError'
        "500":
          description: Не удалось получить сообщениея
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: получить 25 сообщений до определенного
      tags:
      - message
  /chats:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ChatsDTO'
        "500":
          description: Не удалось получить сообщения
      summary: Get chats of user
      tags:
      - chat
  /chats/search:
    get:
      parameters:
      - description: Ключевое слово для поиска
        in: query
        name: key_word
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SearchChatsDTO'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет полномочий
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "500":
          description: Не удалось получить сообщения
      summary: Поиск чатов пользователя и глобальных каналов по названию
      tags:
      - chat
  /contacts:
    delete:
      consumes:
      - application/json
      description: Deletes user contact.
      parameters:
      - description: Credentials for delete user contact
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.ContactReqDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Contact deleted
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "400":
          description: Failed to delete contact
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete contact
      tags:
      - contacts
    get:
      consumes:
      - application/json
      description: Get all contacts of user.
      produces:
      - application/json
      responses:
        "200":
          description: Contacts found
          schema:
            $ref: '#/definitions/models.GetContactsRespDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all contacts
      tags:
      - contacts
    post:
      consumes:
      - application/json
      description: Create a new contact for the user.
      parameters:
      - description: Credentials for create a new contact
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.ContactReqDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Contact created
          schema:
            $ref: '#/definitions/models.ContactRespDTO'
        "400":
          description: Failed to create contact
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add new contact
      tags:
      - contacts
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password.
      parameters:
      - description: Credentials for login, including username and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.AuthReqDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Authentication successful
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "400":
          description: Invalid format JSON
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Incorrect login or password
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: User login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Invalidate the user's session by clearing the access token cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "401":
          description: No access token found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Log out a user
      tags:
      - auth
  /messages/{messageId}:
    delete:
      parameters:
      - description: messageId ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: messageId
        required: true
        type: string
      responses:
        "200":
          description: Сообщение успешно удалено
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/customerror.NoPermissionError'
        "500":
          description: Не удалось удалить сообщение
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Delete message
      tags:
      - message
    put:
      parameters:
      - description: Message info
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.MessageInput'
      - description: messageId ID (UUID)
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        maxLength: 36
        minLength: 36
        name: messageId
        required: true
        type: string
      responses:
        "200":
          description: Сообщение успешно изменено
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/customerror.NoPermissionError'
        "500":
          description: Не удалось обновить сообщение
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Update message
      tags:
      - message
  /profile:
    get:
      consumes:
      - application/json
      description: Get bio, avatar and birthdate of user.
      produces:
      - application/json
      responses:
        "200":
          description: Profile data found
          schema:
            $ref: '#/definitions/models.GetProfileResponseDTO'
        "400":
          description: Invalid format JSON
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get self profile data
      tags:
      - profile
    put:
      consumes:
      - multipart/form-data
      description: Update bio, avatar, name or birthdate of user.
      parameters:
      - description: JSON representation of profile data
        in: body
        name: profile_data
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequestDTO'
      - description: User avatar image
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "400":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update profile data
      tags:
      - profile
  /profile/{userid}:
    get:
      consumes:
      - application/json
      description: Get bio, avatar and birthdate of user.
      produces:
      - application/json
      responses:
        "200":
          description: Profile data found
          schema:
            $ref: '#/definitions/models.GetProfileResponseDTO'
        "400":
          description: Invalid format JSON
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Get profile data
      tags:
      - profile
  /signup:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided credentials.
      parameters:
      - description: Registration information
        in: body
        name: creds
        required: true
        schema:
          $ref: '#/definitions/models.RegisterReqDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/models.RegisterRespDTO'
        "400":
          description: User failed to create
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "409":
          description: A user with that username already exists
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /uploads/{folder}/{name}:
    get:
      consumes:
      - application/json
      description: Fetches an image from the specified folder and by filename
      parameters:
      - description: Folder name
        example: '"avatar"'
        in: path
        name: folder
        required: true
        type: string
      - description: File name
        example: '"642c5a57-ebc7-49d0-ac2d-f2f1f474bee7.png"'
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful image retrieval
          schema:
            type: file
        "404":
          description: File not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Retrieve an image
      tags:
      - uploads
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
