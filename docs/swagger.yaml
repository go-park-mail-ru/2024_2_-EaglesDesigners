basePath: /
definitions:
  delivery.AuthCredentials:
    properties:
      password:
        example: "12345678"
        type: string
      username:
        example: user11
        type: string
    type: object
  delivery.AuthResponse:
    properties:
      user:
        $ref: '#/definitions/delivery.UserData'
    type: object
  delivery.RegisterCredentials:
    properties:
      name:
        example: Vincent Vega
        type: string
      password:
        example: go_do_a_crime
        type: string
      username:
        example: killer1994
        type: string
    type: object
  delivery.RegisterResponse:
    properties:
      message:
        example: Registration successful
        type: string
      user:
        $ref: '#/definitions/delivery.UserData'
    type: object
  delivery.UserData:
    properties:
      id:
        example: "2"
        type: string
      name:
        example: Dr Peper
        type: string
      username:
        example: user12
        type: string
    type: object
  models.AddContactReqDTO:
    properties:
      contactUsername:
        example: user11
        type: string
    type: object
  models.ContactDTO:
    properties:
      avatarBase64:
        example: this is Base64 photo
        type: string
      id:
        example: 08a0f350-e122-467b-8ba8-524d2478b56e
        type: string
      name:
        description: can be nil
        example: Витек
        type: string
      username:
        example: user11
        type: string
    type: object
  models.GetContactsRespDTO:
    properties:
      contacts:
        items:
          $ref: '#/definitions/models.ContactDTO'
        type: array
    type: object
  models.GetProfileResponseDTO:
    properties:
      avatarURL:
        example: /2024_2_eaglesDesigners/uploads/avatar/f0364477-bfd4-496d-b639-d825b009d509.png
        type: string
      bio:
        example: Не люблю сети
        type: string
      birthdate:
        example: "2024-04-13T08:30:00Z"
        type: string
      name:
        example: Vincent Vega
        type: string
    type: object
  models.UpdateProfileRequestDTO:
    properties:
      bio:
        example: Не люблю сети
        type: string
      birthdate:
        example: "2024-04-13T08:30:00Z"
        type: string
      name:
        example: Vincent Vega
        type: string
    type: object
  responser.ErrorResponse:
    properties:
      error:
        type: string
      status:
        example: error
        type: string
    type: object
  responser.SuccessResponse:
    properties:
      message:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: 212.233.98.59:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a description of the Patefon server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Patefon API
  version: "1.0"
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: Retrieve user data based on the JWT token present in the cookies.
      produces:
      - application/json
      responses:
        "200":
          description: User data retrieved successfully
          schema:
            $ref: '#/definitions/delivery.AuthResponse'
        "401":
          description: 'Unauthorized: token is invalid'
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Authenticate a user
      tags:
      - auth
  /contacts:
    get:
      consumes:
      - application/json
      description: Get all contacts of user.
      produces:
      - application/json
      responses:
        "200":
          description: Contacts found
          schema:
            $ref: '#/definitions/models.GetContactsRespDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all contacts
      tags:
      - contacts
    post:
      consumes:
      - application/json
      description: Create a new contact for the user.
      parameters:
      - description: Credentials for create a new contact
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.AddContactReqDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Contact created
          schema:
            $ref: '#/definitions/models.ContactDTO'
        "400":
          description: Failed to create contact
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add new contact
      tags:
      - contacts
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password.
      parameters:
      - description: Credentials for login, including username and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/delivery.AuthCredentials'
      produces:
      - application/json
      responses:
        "201":
          description: Authentication successful
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "400":
          description: Invalid format JSON
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Incorrect login or password
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: User login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Invalidate the user's session by clearing the access token cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "401":
          description: No access token found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Log out a user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get bio, avatar and birthdate of user.
      produces:
      - application/json
      responses:
        "200":
          description: Profile data found
          schema:
            $ref: '#/definitions/models.GetProfileResponseDTO'
        "400":
          description: Invalid format JSON
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get profile data
      tags:
      - profile
    put:
      consumes:
      - multipart/form-data
      description: Update bio, avatar, name or birthdate of user.
      parameters:
      - description: JSON representation of profile data
        in: body
        name: profile_data
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequestDTO'
      - description: User avatar image
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated
          schema:
            $ref: '#/definitions/responser.SuccessResponse'
        "400":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update profile data
      tags:
      - profile
  /signup:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided credentials.
      parameters:
      - description: Registration information
        in: body
        name: creds
        required: true
        schema:
          $ref: '#/definitions/delivery.RegisterCredentials'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/delivery.RegisterResponse'
        "400":
          description: User failed to create
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
        "409":
          description: A user with that username already exists
          schema:
            $ref: '#/definitions/responser.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /uploads/{folder}/{name}:
    get:
      consumes:
      - application/json
      description: Fetches an image from the specified folder and by filename
      parameters:
      - description: Folder name
        example: '"avatar"'
        in: path
        name: folder
        required: true
        type: string
      - description: File name
        example: '"642c5a57-ebc7-49d0-ac2d-f2f1f474bee7.png"'
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful image retrieval
          schema:
            type: file
        "404":
          description: File not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Retrieve an image
      tags:
      - uploads
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
