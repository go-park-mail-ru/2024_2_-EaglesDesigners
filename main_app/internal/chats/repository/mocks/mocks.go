// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/chats/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// AddBranch mocks base method.
func (m *MockChatRepository) AddBranch(ctx context.Context, chatId, messageId uuid.UUID) (model.AddBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBranch", ctx, chatId, messageId)
	ret0, _ := ret[0].(model.AddBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBranch indicates an expected call of AddBranch.
func (mr *MockChatRepositoryMockRecorder) AddBranch(ctx, chatId, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBranch", reflect.TypeOf((*MockChatRepository)(nil).AddBranch), ctx, chatId, messageId)
}

// AddUserIntoChat mocks base method.
func (m *MockChatRepository) AddUserIntoChat(ctx context.Context, userId, chatId uuid.UUID, userROle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserIntoChat", ctx, userId, chatId, userROle)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserIntoChat indicates an expected call of AddUserIntoChat.
func (mr *MockChatRepositoryMockRecorder) AddUserIntoChat(ctx, userId, chatId, userROle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserIntoChat", reflect.TypeOf((*MockChatRepository)(nil).AddUserIntoChat), ctx, userId, chatId, userROle)
}

// CreateNewChat mocks base method.
func (m *MockChatRepository) CreateNewChat(ctx context.Context, chat model.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewChat", ctx, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewChat indicates an expected call of CreateNewChat.
func (mr *MockChatRepositoryMockRecorder) CreateNewChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewChat", reflect.TypeOf((*MockChatRepository)(nil).CreateNewChat), ctx, chat)
}

// DeleteChat mocks base method.
func (m *MockChatRepository) DeleteChat(ctx context.Context, chatId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatRepositoryMockRecorder) DeleteChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatRepository)(nil).DeleteChat), ctx, chatId)
}

// DeleteUserFromChat mocks base method.
func (m *MockChatRepository) DeleteUserFromChat(ctx context.Context, userId, chatId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromChat", ctx, userId, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromChat indicates an expected call of DeleteUserFromChat.
func (mr *MockChatRepositoryMockRecorder) DeleteUserFromChat(ctx, userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromChat", reflect.TypeOf((*MockChatRepository)(nil).DeleteUserFromChat), ctx, userId, chatId)
}

// GetChatById mocks base method.
func (m *MockChatRepository) GetChatById(ctx context.Context, chatId uuid.UUID) (model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatById", ctx, chatId)
	ret0, _ := ret[0].(model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatById indicates an expected call of GetChatById.
func (mr *MockChatRepositoryMockRecorder) GetChatById(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatById", reflect.TypeOf((*MockChatRepository)(nil).GetChatById), ctx, chatId)
}

// GetChatType mocks base method.
func (m *MockChatRepository) GetChatType(ctx context.Context, chatId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatType", ctx, chatId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatType indicates an expected call of GetChatType.
func (mr *MockChatRepositoryMockRecorder) GetChatType(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatType", reflect.TypeOf((*MockChatRepository)(nil).GetChatType), ctx, chatId)
}

// GetCountOfUsersInChat mocks base method.
func (m *MockChatRepository) GetCountOfUsersInChat(ctx context.Context, chatId uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountOfUsersInChat", ctx, chatId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountOfUsersInChat indicates an expected call of GetCountOfUsersInChat.
func (mr *MockChatRepositoryMockRecorder) GetCountOfUsersInChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountOfUsersInChat", reflect.TypeOf((*MockChatRepository)(nil).GetCountOfUsersInChat), ctx, chatId)
}

// GetNameAndAvatar mocks base method.
func (m *MockChatRepository) GetNameAndAvatar(ctx context.Context, userId uuid.UUID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameAndAvatar", ctx, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNameAndAvatar indicates an expected call of GetNameAndAvatar.
func (mr *MockChatRepositoryMockRecorder) GetNameAndAvatar(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameAndAvatar", reflect.TypeOf((*MockChatRepository)(nil).GetNameAndAvatar), ctx, userId)
}

// GetUserChats mocks base method.
func (m *MockChatRepository) GetUserChats(ctx context.Context, userId uuid.UUID) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userId)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatRepositoryMockRecorder) GetUserChats(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatRepository)(nil).GetUserChats), ctx, userId)
}

// GetUserRoleInChat mocks base method.
func (m *MockChatRepository) GetUserRoleInChat(ctx context.Context, userId, chatId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleInChat", ctx, userId, chatId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleInChat indicates an expected call of GetUserRoleInChat.
func (mr *MockChatRepositoryMockRecorder) GetUserRoleInChat(ctx, userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleInChat", reflect.TypeOf((*MockChatRepository)(nil).GetUserRoleInChat), ctx, userId, chatId)
}

// GetUsersFromChat mocks base method.
func (m *MockChatRepository) GetUsersFromChat(ctx context.Context, chatId uuid.UUID) ([]model.UserInChatDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFromChat", ctx, chatId)
	ret0, _ := ret[0].([]model.UserInChatDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFromChat indicates an expected call of GetUsersFromChat.
func (mr *MockChatRepositoryMockRecorder) GetUsersFromChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFromChat", reflect.TypeOf((*MockChatRepository)(nil).GetUsersFromChat), ctx, chatId)
}

// SearchGlobalChats mocks base method.
func (m *MockChatRepository) SearchGlobalChats(ctx context.Context, userId uuid.UUID, keyWord string) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGlobalChats", ctx, userId, keyWord)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGlobalChats indicates an expected call of SearchGlobalChats.
func (mr *MockChatRepositoryMockRecorder) SearchGlobalChats(ctx, userId, keyWord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGlobalChats", reflect.TypeOf((*MockChatRepository)(nil).SearchGlobalChats), ctx, userId, keyWord)
}

// SearchUserChats mocks base method.
func (m *MockChatRepository) SearchUserChats(ctx context.Context, userId uuid.UUID, keyWord string) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserChats", ctx, userId, keyWord)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserChats indicates an expected call of SearchUserChats.
func (mr *MockChatRepositoryMockRecorder) SearchUserChats(ctx, userId, keyWord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserChats", reflect.TypeOf((*MockChatRepository)(nil).SearchUserChats), ctx, userId, keyWord)
}

// UpdateChat mocks base method.
func (m *MockChatRepository) UpdateChat(ctx context.Context, chatId uuid.UUID, chatUpdate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", ctx, chatId, chatUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockChatRepositoryMockRecorder) UpdateChat(ctx, chatId, chatUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockChatRepository)(nil).UpdateChat), ctx, chatId, chatUpdate)
}

// UpdateChatPhoto mocks base method.
func (m *MockChatRepository) UpdateChatPhoto(ctx context.Context, chatId uuid.UUID, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatPhoto", ctx, chatId, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChatPhoto indicates an expected call of UpdateChatPhoto.
func (mr *MockChatRepositoryMockRecorder) UpdateChatPhoto(ctx, chatId, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatPhoto", reflect.TypeOf((*MockChatRepository)(nil).UpdateChatPhoto), ctx, chatId, filename)
}
