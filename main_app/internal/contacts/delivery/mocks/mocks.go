// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/contacts/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockusecase is a mock of usecase interface.
type Mockusecase struct {
	ctrl     *gomock.Controller
	recorder *MockusecaseMockRecorder
}

// MockusecaseMockRecorder is the mock recorder for Mockusecase.
type MockusecaseMockRecorder struct {
	mock *Mockusecase
}

// NewMockusecase creates a new mock instance.
func NewMockusecase(ctrl *gomock.Controller) *Mockusecase {
	mock := &Mockusecase{ctrl: ctrl}
	mock.recorder = &MockusecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockusecase) EXPECT() *MockusecaseMockRecorder {
	return m.recorder
}

// AddContact mocks base method.
func (m *Mockusecase) AddContact(ctx context.Context, contactData models.ContactData) (models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", ctx, contactData)
	ret0, _ := ret[0].(models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact.
func (mr *MockusecaseMockRecorder) AddContact(ctx, contactData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*Mockusecase)(nil).AddContact), ctx, contactData)
}

// DeleteContact mocks base method.
func (m *Mockusecase) DeleteContact(ctx context.Context, contactData models.ContactData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", ctx, contactData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockusecaseMockRecorder) DeleteContact(ctx, contactData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*Mockusecase)(nil).DeleteContact), ctx, contactData)
}

// GetContacts mocks base method.
func (m *Mockusecase) GetContacts(ctx context.Context, username string) ([]models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, username)
	ret0, _ := ret[0].([]models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockusecaseMockRecorder) GetContacts(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*Mockusecase)(nil).GetContacts), ctx, username)
}

// SearchContacts mocks base method.
func (m *Mockusecase) SearchContacts(ctx context.Context, userID uuid.UUID, keyWord string) (models.SearchContactsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContacts", ctx, userID, keyWord)
	ret0, _ := ret[0].(models.SearchContactsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContacts indicates an expected call of SearchContacts.
func (mr *MockusecaseMockRecorder) SearchContacts(ctx, userID, keyWord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContacts", reflect.TypeOf((*Mockusecase)(nil).SearchContacts), ctx, userID, keyWord)
}
