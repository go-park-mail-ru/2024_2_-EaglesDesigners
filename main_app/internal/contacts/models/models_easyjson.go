// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels(in *jlexer.Lexer, out *SearchContactsDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_contacts":
			if in.IsNull() {
				in.Skip()
				out.UserContacts = nil
			} else {
				in.Delim('[')
				if out.UserContacts == nil {
					if !in.IsDelim(']') {
						out.UserContacts = make([]ContactRespDTO, 0, 1)
					} else {
						out.UserContacts = []ContactRespDTO{}
					}
				} else {
					out.UserContacts = (out.UserContacts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ContactRespDTO
					(v1).UnmarshalEasyJSON(in)
					out.UserContacts = append(out.UserContacts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "global_users":
			if in.IsNull() {
				in.Skip()
				out.GlobalUsers = nil
			} else {
				in.Delim('[')
				if out.GlobalUsers == nil {
					if !in.IsDelim(']') {
						out.GlobalUsers = make([]ContactRespDTO, 0, 1)
					} else {
						out.GlobalUsers = []ContactRespDTO{}
					}
				} else {
					out.GlobalUsers = (out.GlobalUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ContactRespDTO
					(v2).UnmarshalEasyJSON(in)
					out.GlobalUsers = append(out.GlobalUsers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels(out *jwriter.Writer, in SearchContactsDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_contacts\":"
		out.RawString(prefix[1:])
		if in.UserContacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.UserContacts {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"global_users\":"
		out.RawString(prefix)
		if in.GlobalUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.GlobalUsers {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchContactsDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchContactsDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchContactsDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchContactsDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels1(in *jlexer.Lexer, out *GetContactsRespDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contacts":
			if in.IsNull() {
				in.Skip()
				out.Contacts = nil
			} else {
				in.Delim('[')
				if out.Contacts == nil {
					if !in.IsDelim(']') {
						out.Contacts = make([]ContactRespDTO, 0, 1)
					} else {
						out.Contacts = []ContactRespDTO{}
					}
				} else {
					out.Contacts = (out.Contacts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 ContactRespDTO
					(v7).UnmarshalEasyJSON(in)
					out.Contacts = append(out.Contacts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels1(out *jwriter.Writer, in GetContactsRespDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contacts\":"
		out.RawString(prefix[1:])
		if in.Contacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Contacts {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetContactsRespDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetContactsRespDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetContactsRespDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetContactsRespDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels2(in *jlexer.Lexer, out *ContactRespDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "avatarURL":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels2(out *jwriter.Writer, in ContactRespDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"avatarURL\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactRespDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactRespDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactRespDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactRespDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels3(in *jlexer.Lexer, out *ContactReqDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contactUsername":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels3(out *jwriter.Writer, in ContactReqDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contactUsername\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactReqDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactReqDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactReqDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactReqDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels4(in *jlexer.Lexer, out *ContactDataDAO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = string(in.String())
		case "ContactUsername":
			out.ContactUsername = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels4(out *jwriter.Writer, in ContactDataDAO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"ContactUsername\":"
		out.RawString(prefix)
		out.String(string(in.ContactUsername))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactDataDAO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactDataDAO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactDataDAO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactDataDAO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels5(in *jlexer.Lexer, out *ContactData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = string(in.String())
		case "ContactUsername":
			out.ContactUsername = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels5(out *jwriter.Writer, in ContactData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"ContactUsername\":"
		out.RawString(prefix)
		out.String(string(in.ContactUsername))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels6(in *jlexer.Lexer, out *ContactDAO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "Username":
			out.Username = string(in.String())
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "AvatarURL":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels6(out *jwriter.Writer, in ContactDAO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"AvatarURL\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactDAO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactDAO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactDAO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactDAO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels7(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "AvatarURL":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels7(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"AvatarURL\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalContactsModels7(l, v)
}
