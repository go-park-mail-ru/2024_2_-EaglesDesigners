// Code generated by MockGen. DO NOT EDIT.
// Source: messages_repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/messages/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageRepository) AddMessage(message models.Message, chatId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", message, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageRepositoryMockRecorder) AddMessage(message, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageRepository)(nil).AddMessage), message, chatId)
}

// DeleteMessage mocks base method.
func (m *MockMessageRepository) DeleteMessage(ctx context.Context, messageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageRepositoryMockRecorder) DeleteMessage(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageRepository)(nil).DeleteMessage), ctx, messageId)
}

// GetAllMessagesAfter mocks base method.
func (m *MockMessageRepository) GetAllMessagesAfter(ctx context.Context, chatId, lastMessageId uuid.UUID) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessagesAfter", ctx, chatId, lastMessageId)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessagesAfter indicates an expected call of GetAllMessagesAfter.
func (mr *MockMessageRepositoryMockRecorder) GetAllMessagesAfter(ctx, chatId, lastMessageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessagesAfter", reflect.TypeOf((*MockMessageRepository)(nil).GetAllMessagesAfter), ctx, chatId, lastMessageId)
}

// GetFirstMessages mocks base method.
func (m *MockMessageRepository) GetFirstMessages(ctx context.Context, chatId uuid.UUID) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstMessages", ctx, chatId)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstMessages indicates an expected call of GetFirstMessages.
func (mr *MockMessageRepositoryMockRecorder) GetFirstMessages(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetFirstMessages), ctx, chatId)
}

// GetLastMessage mocks base method.
func (m *MockMessageRepository) GetLastMessage(chatId uuid.UUID) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMessage", chatId)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessage indicates an expected call of GetLastMessage.
func (mr *MockMessageRepositoryMockRecorder) GetLastMessage(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessage", reflect.TypeOf((*MockMessageRepository)(nil).GetLastMessage), chatId)
}

// GetMessageById mocks base method.
func (m *MockMessageRepository) GetMessageById(ctx context.Context, messageId uuid.UUID) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageById", ctx, messageId)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageById indicates an expected call of GetMessageById.
func (mr *MockMessageRepositoryMockRecorder) GetMessageById(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageById", reflect.TypeOf((*MockMessageRepository)(nil).GetMessageById), ctx, messageId)
}

// SearchMessagesWithQuery mocks base method.
func (m *MockMessageRepository) SearchMessagesWithQuery(ctx context.Context, chatId uuid.UUID, searchQuery string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessagesWithQuery", ctx, chatId, searchQuery)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesWithQuery indicates an expected call of SearchMessagesWithQuery.
func (mr *MockMessageRepositoryMockRecorder) SearchMessagesWithQuery(ctx, chatId, searchQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesWithQuery", reflect.TypeOf((*MockMessageRepository)(nil).SearchMessagesWithQuery), ctx, chatId, searchQuery)
}

// UpdateMessage mocks base method.
func (m *MockMessageRepository) UpdateMessage(ctx context.Context, messageId uuid.UUID, newText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, messageId, newText)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessageRepositoryMockRecorder) UpdateMessage(ctx, messageId, newText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessageRepository)(nil).UpdateMessage), ctx, messageId, newText)
}
