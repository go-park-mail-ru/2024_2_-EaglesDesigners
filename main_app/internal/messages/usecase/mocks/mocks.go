// Code generated by MockGen. DO NOT EDIT.
// Source: messages_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/auth/models"
	models0 "github.com/go-park-mail-ru/2024_2_EaglesDesigner/main_app/internal/messages/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMessageUsecase is a mock of MessageUsecase interface.
type MockMessageUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUsecaseMockRecorder
}

// MockMessageUsecaseMockRecorder is the mock recorder for MockMessageUsecase.
type MockMessageUsecaseMockRecorder struct {
	mock *MockMessageUsecase
}

// NewMockMessageUsecase creates a new mock instance.
func NewMockMessageUsecase(ctrl *gomock.Controller) *MockMessageUsecase {
	mock := &MockMessageUsecase{ctrl: ctrl}
	mock.recorder = &MockMessageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUsecase) EXPECT() *MockMessageUsecaseMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageUsecase) DeleteMessage(ctx context.Context, user models.User, messageId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, user, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageUsecaseMockRecorder) DeleteMessage(ctx, user, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageUsecase)(nil).DeleteMessage), ctx, user, messageId)
}

// GetFirstMessages mocks base method.
func (m *MockMessageUsecase) GetFirstMessages(ctx context.Context, chatId uuid.UUID) (models0.MessagesArrayDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstMessages", ctx, chatId)
	ret0, _ := ret[0].(models0.MessagesArrayDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstMessages indicates an expected call of GetFirstMessages.
func (mr *MockMessageUsecaseMockRecorder) GetFirstMessages(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstMessages", reflect.TypeOf((*MockMessageUsecase)(nil).GetFirstMessages), ctx, chatId)
}

// GetMessagesWithPage mocks base method.
func (m *MockMessageUsecase) GetMessagesWithPage(ctx context.Context, userId, chatId, lastMessageId uuid.UUID) (models0.MessagesArrayDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesWithPage", ctx, userId, chatId, lastMessageId)
	ret0, _ := ret[0].(models0.MessagesArrayDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesWithPage indicates an expected call of GetMessagesWithPage.
func (mr *MockMessageUsecaseMockRecorder) GetMessagesWithPage(ctx, userId, chatId, lastMessageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesWithPage", reflect.TypeOf((*MockMessageUsecase)(nil).GetMessagesWithPage), ctx, userId, chatId, lastMessageId)
}

// SearchMessagesWithQuery mocks base method.
func (m *MockMessageUsecase) SearchMessagesWithQuery(ctx context.Context, user models.User, chatId uuid.UUID, searchQuery string) (models0.MessagesArrayDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessagesWithQuery", ctx, user, chatId, searchQuery)
	ret0, _ := ret[0].(models0.MessagesArrayDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesWithQuery indicates an expected call of SearchMessagesWithQuery.
func (mr *MockMessageUsecaseMockRecorder) SearchMessagesWithQuery(ctx, user, chatId, searchQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesWithQuery", reflect.TypeOf((*MockMessageUsecase)(nil).SearchMessagesWithQuery), ctx, user, chatId, searchQuery)
}

// SendMessage mocks base method.
func (m *MockMessageUsecase) SendMessage(ctx context.Context, user models.User, chatId uuid.UUID, message models0.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, user, chatId, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageUsecaseMockRecorder) SendMessage(ctx, user, chatId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageUsecase)(nil).SendMessage), ctx, user, chatId, message)
}

// UpdateMessage mocks base method.
func (m *MockMessageUsecase) UpdateMessage(ctx context.Context, user models.User, messageId uuid.UUID, message models0.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, user, messageId, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessageUsecaseMockRecorder) UpdateMessage(ctx, user, messageId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessageUsecase)(nil).UpdateMessage), ctx, user, messageId, message)
}
