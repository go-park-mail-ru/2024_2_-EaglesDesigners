// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels(in *jlexer.Lexer, out *ProfileDataDAO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "Bio":
			if in.IsNull() {
				in.Skip()
				out.Bio = nil
			} else {
				if out.Bio == nil {
					out.Bio = new(string)
				}
				*out.Bio = string(in.String())
			}
		case "AvatarPath":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		case "Birthdate":
			if in.IsNull() {
				in.Skip()
				out.Birthdate = nil
			} else {
				if out.Birthdate == nil {
					out.Birthdate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthdate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels(out *jwriter.Writer, in ProfileDataDAO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"Bio\":"
		out.RawString(prefix)
		if in.Bio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Bio))
		}
	}
	{
		const prefix string = ",\"AvatarPath\":"
		out.RawString(prefix)
		if in.AvatarPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarPath))
		}
	}
	{
		const prefix string = ",\"Birthdate\":"
		out.RawString(prefix)
		if in.Birthdate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthdate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileDataDAO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileDataDAO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileDataDAO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileDataDAO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels1(in *jlexer.Lexer, out *ProfileData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "Bio":
			if in.IsNull() {
				in.Skip()
				out.Bio = nil
			} else {
				if out.Bio == nil {
					out.Bio = new(string)
				}
				*out.Bio = string(in.String())
			}
		case "AvatarPath":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		case "Birthdate":
			if in.IsNull() {
				in.Skip()
				out.Birthdate = nil
			} else {
				if out.Birthdate == nil {
					out.Birthdate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthdate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels1(out *jwriter.Writer, in ProfileData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"Bio\":"
		out.RawString(prefix)
		if in.Bio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Bio))
		}
	}
	{
		const prefix string = ",\"AvatarPath\":"
		out.RawString(prefix)
		if in.AvatarPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarPath))
		}
	}
	{
		const prefix string = ",\"Birthdate\":"
		out.RawString(prefix)
		if in.Birthdate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthdate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels2(in *jlexer.Lexer, out *ProfileDAO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "Name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "Bio":
			if in.IsNull() {
				in.Skip()
				out.Bio = nil
			} else {
				if out.Bio == nil {
					out.Bio = new(string)
				}
				*out.Bio = string(in.String())
			}
		case "AvatarPath":
			if in.IsNull() {
				in.Skip()
				out.AvatarPath = nil
			} else {
				if out.AvatarPath == nil {
					out.AvatarPath = new(string)
				}
				*out.AvatarPath = string(in.String())
			}
		case "DeleteAvatar":
			out.DeleteAvatar = bool(in.Bool())
		case "Birthdate":
			if in.IsNull() {
				in.Skip()
				out.Birthdate = nil
			} else {
				if out.Birthdate == nil {
					out.Birthdate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthdate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels2(out *jwriter.Writer, in ProfileDAO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"Bio\":"
		out.RawString(prefix)
		if in.Bio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Bio))
		}
	}
	{
		const prefix string = ",\"AvatarPath\":"
		out.RawString(prefix)
		if in.AvatarPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarPath))
		}
	}
	{
		const prefix string = ",\"DeleteAvatar\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeleteAvatar))
	}
	{
		const prefix string = ",\"Birthdate\":"
		out.RawString(prefix)
		if in.Birthdate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthdate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileDAO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileDAO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileDAO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileDAO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels3(in *jlexer.Lexer, out *GetProfileResponseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "bio":
			if in.IsNull() {
				in.Skip()
				out.Bio = nil
			} else {
				if out.Bio == nil {
					out.Bio = new(string)
				}
				*out.Bio = string(in.String())
			}
		case "avatarURL":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		case "birthdate":
			if in.IsNull() {
				in.Skip()
				out.Birthdate = nil
			} else {
				if out.Birthdate == nil {
					out.Birthdate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthdate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels3(out *jwriter.Writer, in GetProfileResponseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		if in.Bio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Bio))
		}
	}
	{
		const prefix string = ",\"avatarURL\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	{
		const prefix string = ",\"birthdate\":"
		out.RawString(prefix)
		if in.Birthdate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthdate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProfileResponseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProfileResponseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProfileResponseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProfileResponseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20242EaglesDesignerMainAppInternalProfileModels3(l, v)
}
