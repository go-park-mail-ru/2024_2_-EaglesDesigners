// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: surveys_service/internal/proto/surveys.proto

package surveysv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Surveys_GetSurvey_FullMethodName  = "/surveys.Surveys/GetSurvey"
	Surveys_AddAnswers_FullMethodName = "/surveys.Surveys/AddAnswers"
)

// SurveysClient is the client API for Surveys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveysClient interface {
	// rpc GetStatictics(Nothing) returns {GetStaticticsResp}
	GetSurvey(ctx context.Context, in *GetSurveyReq, opts ...grpc.CallOption) (*GetSurveyResp, error)
	AddAnswers(ctx context.Context, in *AddAnswersReq, opts ...grpc.CallOption) (*Nothing, error)
}

type surveysClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveysClient(cc grpc.ClientConnInterface) SurveysClient {
	return &surveysClient{cc}
}

func (c *surveysClient) GetSurvey(ctx context.Context, in *GetSurveyReq, opts ...grpc.CallOption) (*GetSurveyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurveyResp)
	err := c.cc.Invoke(ctx, Surveys_GetSurvey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveysClient) AddAnswers(ctx context.Context, in *AddAnswersReq, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Surveys_AddAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveysServer is the server API for Surveys service.
// All implementations must embed UnimplementedSurveysServer
// for forward compatibility.
type SurveysServer interface {
	// rpc GetStatictics(Nothing) returns {GetStaticticsResp}
	GetSurvey(context.Context, *GetSurveyReq) (*GetSurveyResp, error)
	AddAnswers(context.Context, *AddAnswersReq) (*Nothing, error)
	mustEmbedUnimplementedSurveysServer()
}

// UnimplementedSurveysServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSurveysServer struct{}

func (UnimplementedSurveysServer) GetSurvey(context.Context, *GetSurveyReq) (*GetSurveyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurvey not implemented")
}
func (UnimplementedSurveysServer) AddAnswers(context.Context, *AddAnswersReq) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswers not implemented")
}
func (UnimplementedSurveysServer) mustEmbedUnimplementedSurveysServer() {}
func (UnimplementedSurveysServer) testEmbeddedByValue()                 {}

// UnsafeSurveysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveysServer will
// result in compilation errors.
type UnsafeSurveysServer interface {
	mustEmbedUnimplementedSurveysServer()
}

func RegisterSurveysServer(s grpc.ServiceRegistrar, srv SurveysServer) {
	// If the following call pancis, it indicates UnimplementedSurveysServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Surveys_ServiceDesc, srv)
}

func _Surveys_GetSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveysServer).GetSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Surveys_GetSurvey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveysServer).GetSurvey(ctx, req.(*GetSurveyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Surveys_AddAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnswersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveysServer).AddAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Surveys_AddAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveysServer).AddAnswers(ctx, req.(*AddAnswersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Surveys_ServiceDesc is the grpc.ServiceDesc for Surveys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Surveys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "surveys.Surveys",
	HandlerType: (*SurveysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSurvey",
			Handler:    _Surveys_GetSurvey_Handler,
		},
		{
			MethodName: "AddAnswers",
			Handler:    _Surveys_AddAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "surveys_service/internal/proto/surveys.proto",
}
